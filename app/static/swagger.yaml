swagger: '2.0'
info:
  title: "Autoshop API"
  description: "This is a API to manage an autoshop"
  version: "1.0.0"
host: "127.0.0.1:5000"
schemes:
  - "http"
consumes:
  - "application/json"
produces:
  - "application/json"

securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header
  # Our End Points
paths: 
  /login:
    post:
      tags:
        - customers
      summary: "Login endpoint, (generates token)"
      description: "Validates customer credentials, generates and return a customer specific token."
      parameters:
        - in: "body"
          name: "body"
          description: "Login Credentials"
          required: true
          schema:
            $ref: "#/definitions/LoginCredentials"
      responses:
        200:
          description: "Login successful"
          schema:
            $ref: "#/definitions/LoginResponse"

  /customers:
    get:
      tags:
        - Customers
      summary: "Returns all Customers"
      description: "Endpoint to retrieve a list of all customers."
      responses:
        200:
          description: "Retrieved Customers Successfully"           
          schema:
            $ref: "#/definitions/AllCustomers"


    post:
      tags:
        - customers
      summary: "Endpoint to create/register a new customer."
      description: "Endpoint to create a new customer in the Autoshop system, emails must be unique."
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to create a new Customer."
          required: true
          schema:
            $ref: "#/definitions/CreateCustomerPayload"
      responses:
        201:
          description: "Successful Customer Creation"
          schema:
            $ref: "#/definitions/CreateCustomerResponse"
          examples:
            application/json:
              id: 1
              name: John Doe
              DOB: "1900-01-01"
              email: johnd@email.com
              password: password123   

    put: 
      tags:
        - customers
      summary: "Endpoint to update a customer."
      description: "Endpoint to update a customer, this is a token authenticated route, and the user must be logged in to update their account."
      security:
        - bearerAuth: []
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to update a Customer."
          required: true
          schema:
            $ref: "#/definitions/UpdateCustomerPayload"
      responses:
        200:
          description: "Successfully Updated customer"
          schema:
            $ref: "#/definitions/UpdateCustomerResponse"
          examples:
            application/json:
              id: 1
              name: Dohn Joe
              DOB: "1900-01-01"
              email: dohnj@email.com
              password: password123 

    delete:
      tags:
        - Customers
      summary: "Endpoint to delete a customer"
      description: "Endpoint to delete a customer. Requires token authentication, customer must be logged in to delete their account"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Successfully Deleted customer"           
          schema:
            $ref: "#/definitions/DeleteCustomerResponse"
          examples:
            application/json:
              message: "successfully deleted user <customer_id>."

  /mechanics/:
    get:
      tags:
        - mechanics
      summary: "Retrieve all mechanics"
      description: "Returns a list of all mechanics"
      responses:
        200:
          description: "List of mechanics"
          schema:
            $ref: "#/definitions/AllMechanics"

    post:
      tags:
        - mechanics
      summary: "Create a new mechanic"
      description: "Adds a new mechanic to the system"
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/CreateMechanicPayload"
      responses:
        200:
          description: "Mechanic created"
          schema:
            $ref: "#/definitions/MechanicResponse"

  /mechanics/{mechanic_id}:
    put:
      tags:
        - mechanics
      summary: "Update a mechanic"
      description: "Updates the information of a specific mechanic"
      parameters:
        - in: path
          name: mechanic_id
          required: true
          type: integer
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/UpdateMechanicPayload"
      responses:
        200:
          description: "Mechanic updated"
          schema:
            $ref: "#/definitions/MechanicResponse"

    delete:
      tags:
        - mechanics
      summary: "Delete a mechanic"
      description: "Deletes a mechanic by ID"
      parameters:
        - in: path
          name: mechanic_id
          required: true
          type: integer
      responses:
        200:
          description: "Mechanic deleted"
          schema:
            $ref: "#/definitions/DeleteMechanicResponse"

  /mechanics/search:
    get:
      tags:
        - mechanics
      summary: "Search mechanics by name"
      description: "Returns a list of mechanics matching the search query"
      parameters:
        - in: query
          name: name
          required: true
          type: string
      responses:
        200:
          description: "Search results"
          schema:
            $ref: "#/definitions/AllMechanics"

  /mechanics/most_tickets:
    get:
      tags:
        - mechanics
      summary: "Get mechanics with most tickets"
      description: "Returns mechanics sorted by the number of service tickets"
      responses:
        200:
          description: "List of mechanics sorted by ticket count"
          schema:
            $ref: "#/definitions/AllMechanics"

  /service_tickets/:
    get:
      tags:
        - service_tickets
      summary: "Get all service tickets"
      description: "Returns a list of all service tickets in the system."
      responses:
        200:
          description: "Service tickets retrieved"
          schema:
            $ref: "#/definitions/AllServiceTickets"

    post:
      tags:
        - service_tickets
      summary: "Create a service ticket"
      description: "Creates a new service ticket and assigns mechanics to it."
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/CreateServiceTicketPayload"
      responses:
        201:
          description: "Service ticket created"
          schema:
            $ref: "#/definitions/ServiceTicketResponse"

  /service_tickets/my-tickets:
    get:
      tags:
        - service_tickets
      summary: "Get customer's service tickets"
      description: "Returns all tickets belonging to the authenticated customer."
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Customer's service tickets retrieved"
          schema:
            $ref: "#/definitions/AllServiceTickets"

  /service_tickets/{ticket_id}:
    put:
      tags:
        - service_tickets
      summary: "Update service ticket mechanics"
      description: "Adds/removes assigned mechanics for a ticket."
      parameters:
        - in: path
          name: ticket_id
          required: true
          type: integer
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/EditServiceTicketPayload"
      responses:
        200:
          description: "Service ticket updated"
          schema:
            $ref: "#/definitions/ServiceTicketResponse"

    delete:
      tags:
        - service_tickets
      summary: "Delete service ticket"
      description: "Deletes a service ticket by ID."
      parameters:
        - in: path
          name: ticket_id
          required: true
          type: integer
      responses:
        200:
          description: "Service ticket deleted"
          schema:
            $ref: "#/definitions/DeleteServiceTicketResponse"

  /service_tickets/{ticket_id}/add-inventory/{inventory_id}:
    post:
      tags:
        - service_tickets
      summary: "Add inventory item to service ticket"
      description: "Links an inventory part to a service ticket."
      parameters:
        - in: path
          name: ticket_id
          required: true
          type: integer
        - in: path
          name: inventory_id
          required: true
          type: integer
      responses:
        200:
          description: "Inventory added to service ticket"
          schema:
            $ref: "#/definitions/AddInventoryToTicketResponse"

  /inventory/:
    get:
      tags:
        - inventory
      summary: "Get all inventory items"
      description: "Returns a list of all parts and items in inventory."
      responses:
        200:
          description: "Inventory items retrieved"
          schema:
            $ref: "#/definitions/AllInventory"

    post:
      tags:
        - inventory
      summary: "Create new inventory item"
      description: "Adds a new part to the inventory."
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/CreateInventoryPayload"
      responses:
        200:
          description: "Inventory item created"
          schema:
            $ref: "#/definitions/InventoryResponse"

  /inventory/{inventory_id}:
    put:
      tags:
        - inventory
      summary: "Update inventory item"
      description: "Updates an inventory item's name or price."
      parameters:
        - in: path
          name: inventory_id
          required: true
          type: integer
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/UpdateInventoryPayload"
      responses:
        200:
          description: "Inventory item updated"
          schema:
            $ref: "#/definitions/InventoryResponse"

    delete:
      tags:
        - inventory
      summary: "Delete inventory item"
      description: "Removes an inventory item by its ID."
      parameters:
        - in: path
          name: inventory_id
          required: true
          type: integer
      responses:
        200:
          description: "Inventory item deleted"
          schema:
            $ref: "#/definitions/DeleteInventoryResponse"

  /inventory/search-inventory:
    get:
      tags:
        - inventory
      summary: "Search inventory by name"
      description: "Returns inventory items that partially match the search term."
      parameters:
        - in: query
          name: name
          required: true
          type: string
      responses:
        200:
          description: "Search results returned"
          schema:
            $ref: "#/definitions/AllInventory"


definitions: 

  LoginCredentials:
      type: "object"
      properties:
        email:
          type: "string"
        password:
          type: "string"
        
      required:
        - email
        - password
      
  LoginResponse:
    type: "object"
    properties:
      token:
        type: "string"
      message:
        type: "string"
      status:
        type: "string"

  CreateCustomerPayload:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      password:
        type: "string"
    required:
      - name
      - email
      - phone
      - password


  CreateCustomerResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      password:
        type: "string"

  AllCustomers:
    type: "array"
    items:
      type: "object"
      properties:
        id:
          type: "integer"
        name:
          type: "string"
        email:
          type: "string"
        phone:
          type: "string"
        password:
          type: "string"

  UpdateCustomerPayload:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      password:
        type: "string"
      
    required:
      - name
      - email
      - phone
      - password


  UpdateCustomerResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      password:
        type: "string"


  DeleteCustomerResponse:
    type: "object"
    properties:
      message:
        type: "string"   

  CreateMechanicPayload:
  type: object
  required:
    - name
    - email
    - phone
    - salary
  properties:
    name:
      type: string
    email:
      type: string
    phone:
      type: string
    salary:
      type: number
      format: float

UpdateMechanicPayload:
  type: object
  required:
    - name
    - email
    - phone
    - salary
  properties:
    name:
      type: string
    email:
      type: string
    phone:
      type: string
    salary:
      type: number
      format: float

MechanicResponse:
  type: object
  properties:
    id:
      type: integer
    name:
      type: string
    email:
      type: string
    phone:
      type: string
    salary:
      type: number
      format: float

AllMechanics:
  type: array
  items:
    $ref: "#/definitions/MechanicResponse"

DeleteMechanicResponse:
  type: object
  properties:
    message:
      type: string

CreateServiceTicketPayload:
  type: object
  required:
    - VIN
    - service_date
    - service_desc
    - customer_id
    - mechanic_ids
  properties:
    VIN:
      type: string
    service_date:
      type: string
      format: date
    service_desc:
      type: string
    customer_id:
      type: integer
    mechanic_ids:
      type: array
      items:
        type: integer

EditServiceTicketPayload:
  type: object
  required:
    - add mechanic_ids
    - remove mechanic_ids
  properties:
    add mechanic_ids:
      type: array
      items:
        type: integer
    remove mechanic_ids:
      type: array
      items:
        type: integer

ServiceTicketResponse:
  type: object
  properties:
    id:
      type: integer
    VIN:
      type: string
    service_date:
      type: string
      format: date
    service_desc:
      type: string
    customer_id:
      type: integer
    mechanics:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string

AllServiceTickets:
  type: array
  items:
    $ref: "#/definitions/ServiceTicketResponse"

DeleteServiceTicketResponse:
  type: object
  properties:
    message:
      type: string

AddInventoryToTicketResponse:
  type: object
  properties:
    message:
      type: string

  CreateInventoryPayload:
    type: object
    required:
      - name
      - price
    properties:
      name:
        type: string
      price:
        type: number
        format: float

  UpdateInventoryPayload:
    type: object
    required:
      - name
      - price
    properties:
      name:
        type: string
      price:
        type: number
        format: float

  InventoryResponse:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      price:
        type: number
        format: float

  AllInventory:
    type: array
    items:
      $ref: "#/definitions/InventoryResponse"

  DeleteInventoryResponse:
    type: object
    properties:
      message:
        type: string
